"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.coverityIsInDiff = exports.coverityCreateIssueCommentMessage = exports.coverityCreateReviewCommentMessage = exports.coverityCreateNoLongerPresentMessage = exports.coverityIsPresent = exports.COVERITY_COMMENT_PREFACE = exports.COVERITY_UNKNOWN_FILE = exports.COVERITY_NOT_PRESENT = exports.COVERITY_PRESENT = void 0;
var paths_1 = require("../paths");
exports.COVERITY_PRESENT = 'PRESENT';
exports.COVERITY_NOT_PRESENT = 'NOT_PRESENT';
exports.COVERITY_UNKNOWN_FILE = 'Unknown File';
exports.COVERITY_COMMENT_PREFACE = '<!-- Comment managed by coverity-report-output-v7, do not modify!';
function coverityIsPresent(existingMessage) {
    var lines = existingMessage.split('\n');
    return lines.length > 3 && lines[2] !== exports.COVERITY_NOT_PRESENT;
}
exports.coverityIsPresent = coverityIsPresent;
function coverityCreateNoLongerPresentMessage(existingMessage) {
    var existingMessageLines = existingMessage.split('\n');
    return "".concat(existingMessageLines[0], "\n").concat(existingMessageLines[1], "\n").concat(exports.COVERITY_NOT_PRESENT, "\n-->\n\nCoverity issue no longer present as of: ").concat(process.env.CI_COMMIT_SHA, "\n<details>\n<summary>Show issue</summary>\n\n").concat(existingMessageLines.slice(4).join('\n'), "\n</details>");
}
exports.coverityCreateNoLongerPresentMessage = coverityCreateNoLongerPresentMessage;
function coverityCreateReviewCommentMessage(issue) {
    var issueName = issue.checkerProperties ? issue.checkerProperties.subcategoryShortDescription : issue.checkerName;
    var checkerNameString = issue.checkerProperties ? "\r\n_".concat(issue.checkerName, "_") : '';
    var impactString = issue.checkerProperties ? issue.checkerProperties.impact : 'Unknown';
    var cweString = issue.checkerProperties ? ", CWE-".concat(issue.checkerProperties.cweCategory) : '';
    var mainEvent = issue.events.find(function (event) { return event.main; });
    var mainEventDescription = mainEvent ? mainEvent.eventDescription : '';
    var remediationEvent = issue.events.find(function (event) { return event.remediation; });
    var remediationString = remediationEvent ? "## How to fix\r\n ".concat(remediationEvent.eventDescription) : '';
    return "".concat(exports.COVERITY_COMMENT_PREFACE, "\n").concat(issue.mergeKey, "\n").concat(exports.COVERITY_PRESENT, "\n-->\n\n# Coverity Issue - ").concat(issueName, "\n").concat(mainEventDescription, "\n\n_").concat(impactString, " Impact").concat(cweString, "_").concat(checkerNameString, "\n\n").concat(remediationString, "\n");
}
exports.coverityCreateReviewCommentMessage = coverityCreateReviewCommentMessage;
function coverityCreateIssueCommentMessage(issue, file_link) {
    var message = coverityCreateReviewCommentMessage(issue);
    var relativePath = issue.strippedMainEventFilePathname.startsWith('/') ?
        (0, paths_1.relatavize_path)(process.cwd(), issue.strippedMainEventFilePathname) :
        issue.strippedMainEventFilePathname;
    return "".concat(message, "\n## Issue location\nThis issue was discovered outside the diff for this Pull Request. You can find it at:\n[").concat(relativePath, ":").concat(issue.mainEventLineNumber, "](").concat(file_link, ")\n");
}
exports.coverityCreateIssueCommentMessage = coverityCreateIssueCommentMessage;
function coverityIsInDiff(issue, diffMap) {
    var relativePath = issue.strippedMainEventFilePathname.startsWith('/') ?
        (0, paths_1.relatavize_path)(process.cwd(), issue.strippedMainEventFilePathname) :
        issue.strippedMainEventFilePathname;
    var diffHunks = diffMap.get(relativePath);
    if (!diffHunks) {
        return false;
    }
    return diffHunks.filter(function (hunk) { return hunk.firstLine <= issue.mainEventLineNumber; }).some(function (hunk) { return issue.mainEventLineNumber <= hunk.lastLine; });
}
exports.coverityIsInDiff = coverityIsInDiff;
