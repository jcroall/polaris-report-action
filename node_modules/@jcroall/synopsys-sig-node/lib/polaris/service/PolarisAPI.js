"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.polarisCreateNoLongerPresentMessage = exports.polarisGetTriageValue = exports.polarisIsInDiff = exports.polarisCreateIssueCommentMessage = exports.polarisCreateReviewCommentMessage = exports.POLARIS_COMMENT_PREFACE = exports.POLARIS_UNKNOWN_FILE = exports.POLARIS_NOT_PRESENT = exports.POLARIS_PRESENT = exports.polarisGetIssueEventsWithSource = exports.polarisGetIssueEvents = exports.polarisGetIssueTriage = exports.getIssuesPage = exports.polarisGetIssues = exports.polarisGetIssuesUnified = exports.polarisGetBranchesPage = exports.polarisGetBranches = exports.polarisGetRunsPage = exports.polarisGetRuns = void 0;
var SIGLogger_1 = require("../../SIGLogger");
function polarisGetRuns(polarisService, projectId, branchId) {
    return __awaiter(this, void 0, void 0, function () {
        var complete, offset, limit, collected_runs, run_page;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    complete = false;
                    offset = 0;
                    limit = 25;
                    collected_runs = Array();
                    _a.label = 1;
                case 1:
                    if (!!complete) return [3 /*break*/, 3];
                    return [4 /*yield*/, polarisGetRunsPage(polarisService, projectId, branchId, limit, offset)];
                case 2:
                    run_page = _a.sent();
                    collected_runs = collected_runs.concat(run_page.data);
                    offset = offset + limit;
                    if (offset >= run_page.meta.total) {
                        complete = true;
                    }
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/, (collected_runs)];
            }
        });
    });
}
exports.polarisGetRuns = polarisGetRuns;
function polarisGetRunsPage(polarisService, projectId, branchId, limit, offset) {
    return __awaiter(this, void 0, void 0, function () {
        var runs_path, run_data, runs;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    runs_path = "".concat(polarisService.polaris_url) +
                        "/api/common/v0/runs?page[limit]=".concat(limit) +
                        "&page[offset]=".concat(offset) +
                        "&filter[run][project][id][eq]=".concat(projectId) +
                        "&filter[run][revision][branch][id][eq]=".concat(branchId);
                    SIGLogger_1.logger.debug("Fetch runs from: ".concat(runs_path));
                    return [4 /*yield*/, polarisService.get_url(runs_path)
                        //logger.debug(`Polaris runs data for projectId ${projectId} and branchId ${branchId}: ${JSON.stringify(run_data.data, null, 2)}`)
                    ];
                case 1:
                    run_data = _a.sent();
                    runs = run_data.data;
                    return [2 /*return*/, (runs)];
            }
        });
    });
}
exports.polarisGetRunsPage = polarisGetRunsPage;
function polarisGetBranches(polarisService, projectId) {
    return __awaiter(this, void 0, void 0, function () {
        var complete, offset, limit, collected_branches, branch_page;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    complete = false;
                    offset = 0;
                    limit = 25;
                    collected_branches = Array();
                    _a.label = 1;
                case 1:
                    if (!!complete) return [3 /*break*/, 3];
                    return [4 /*yield*/, polarisGetBranchesPage(polarisService, projectId, limit, offset)];
                case 2:
                    branch_page = _a.sent();
                    collected_branches = collected_branches.concat(branch_page.data);
                    offset = offset + limit;
                    if (offset >= branch_page.meta.total) {
                        complete = true;
                    }
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/, (collected_branches)];
            }
        });
    });
}
exports.polarisGetBranches = polarisGetBranches;
function polarisGetBranchesPage(polarisService, projectId, limit, offset) {
    return __awaiter(this, void 0, void 0, function () {
        var branches_path, branch_data, branches;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    branches_path = "".concat(polarisService.polaris_url) +
                        "/api/common/v0/branches?" +
                        "page%5Blimit%5D=".concat(limit) +
                        "&page%5Boffset%5D=".concat(offset) +
                        "&filter%5Bbranch%5D%5Bproject%5D%5Bid%5D%5B%24eq%5D=".concat(projectId);
                    SIGLogger_1.logger.debug("Fetch branches from: ".concat(branches_path));
                    return [4 /*yield*/, polarisService.get_url(branches_path)];
                case 1:
                    branch_data = _a.sent();
                    SIGLogger_1.logger.debug("Polaris branch data for projectId ".concat(projectId, " : ").concat(JSON.stringify(branch_data.data, null, 2)));
                    branches = branch_data.data;
                    return [2 /*return*/, (branches)];
            }
        });
    });
}
exports.polarisGetBranchesPage = polarisGetBranchesPage;
function polarisGetIssuesUnified(polarisService, projectId, branchId, useBranch, runId, useRun, compareBranchId, compareRunId, filterOpenOrClosed) {
    var _a, _b, _c, _d, _e, _f;
    return __awaiter(this, void 0, void 0, function () {
        var issues, issuesUnified, _i, _g, issue, issueEvents, error_1, issueTriage, issueUnified, issue_type_id, issue_path_id, tool_id, issue_opened_id, issue_severity_id, dismissStatus, _h, _j, included_data, _k, _l, taxaData, _m, _o, event_1, issueUnifiedEvent;
        return __generator(this, function (_p) {
            switch (_p.label) {
                case 0: return [4 /*yield*/, polarisGetIssues(polarisService, projectId, useBranch ? branchId : "", useRun ? runId : "", compareBranchId, compareRunId, filterOpenOrClosed)];
                case 1:
                    issues = _p.sent();
                    SIGLogger_1.logger.debug("There are ".concat(issues.issueData.length, " issues for project: ").concat(projectId, " and run: ").concat(runId));
                    issuesUnified = new Array();
                    _i = 0, _g = issues.issueData;
                    _p.label = 2;
                case 2:
                    if (!(_i < _g.length)) return [3 /*break*/, 11];
                    issue = _g[_i];
                    SIGLogger_1.logger.debug("Issue ".concat(issue.id, " has issue key: ").concat((_a = issue.relationships["issue-type"]) === null || _a === void 0 ? void 0 : _a.data.id));
                    issueEvents = undefined;
                    _p.label = 3;
                case 3:
                    _p.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, polarisGetIssueEventsWithSource(polarisService, issue.attributes["finding-key"], runId)];
                case 4:
                    issueEvents = _p.sent();
                    return [3 /*break*/, 6];
                case 5:
                    error_1 = _p.sent();
                    SIGLogger_1.logger.warn("Unable to fetch issue events for finding key: ".concat(issue.attributes["finding-key"], " for run: ").concat(runId));
                    return [3 /*break*/, 6];
                case 6: return [4 /*yield*/, polarisGetIssueTriage(polarisService, projectId, issue.attributes["issue-key"])];
                case 7:
                    issueTriage = _p.sent();
                    issueUnified = {};
                    issue_type_id = (_b = issue.relationships["issue-type"]) === null || _b === void 0 ? void 0 : _b.data.id;
                    issue_path_id = (_c = issue.relationships.path) === null || _c === void 0 ? void 0 : _c.data.id;
                    tool_id = (_d = issue.relationships.tool) === null || _d === void 0 ? void 0 : _d.data.id;
                    issue_opened_id = (_e = issue.relationships.transitions) === null || _e === void 0 ? void 0 : _e.data[0].id;
                    issue_severity_id = (_f = issue.relationships.severity) === null || _f === void 0 ? void 0 : _f.data.id;
                    issueUnified.key = issue.attributes["issue-key"];
                    issueUnified.checkerName = issue.attributes["sub-tool"];
                    issueUnified.dismissed = false;
                    if (!issueTriage) return [3 /*break*/, 9];
                    return [4 /*yield*/, polarisGetTriageValue("DISMISS", issueTriage.attributes["triage-current-values"])];
                case 8:
                    dismissStatus = _p.sent();
                    if (dismissStatus && dismissStatus["display-value"] == "Dismissed") {
                        issueUnified.dismissed = true;
                    }
                    _p.label = 9;
                case 9:
                    issueUnified.path = "N/A";
                    issueUnified.name = "N/A";
                    issueUnified.description = "N/A";
                    issueUnified.localEffect = "N/A";
                    issueUnified.link = "N/A";
                    issueUnified.severity = "N/A";
                    for (_h = 0, _j = issues.issueIncluded; _h < _j.length; _h++) {
                        included_data = _j[_h];
                        if (issue_path_id && included_data.type == "path" && included_data.id == issue_path_id) {
                            issueUnified.path = included_data.attributes.path ? included_data.attributes.path.join('/') : "N/A";
                        }
                        if (issue_type_id && included_data.type == "issue-type" && included_data.id == issue_type_id) {
                            issueUnified.name = included_data.attributes["name"] ? included_data.attributes["name"] : "N/A";
                            issueUnified.description = included_data.attributes["description"] ? included_data.attributes["description"] : "N/A";
                            issueUnified.localEffect = included_data.attributes["local-effect"] ? included_data.attributes["local-effect"] : "N/A";
                        }
                        if (issue_opened_id && included_data.type == "transition" && included_data.id == issue_opened_id) {
                            issueUnified.link = "".concat(polarisService.polaris_url, "/projects/").concat(projectId, "/branches/").concat(branchId, "/revisions/") +
                                "".concat(included_data.attributes["revision-id"], "/issues/").concat(issue.attributes["issue-key"]);
                        }
                        if (issue_severity_id && included_data.type == "taxon" && included_data.id == issue_severity_id) {
                            issueUnified.severity = included_data.attributes.name ? included_data.attributes.name : "N/A";
                        }
                    }
                    issueUnified.cwe = "N/A";
                    if (issue.relationships["related-taxa"]) {
                        issueUnified.cwe = "";
                        for (_k = 0, _l = issue.relationships["related-taxa"].data; _k < _l.length; _k++) {
                            taxaData = _l[_k];
                            if (issueUnified.cwe == "") {
                                issueUnified.cwe = taxaData.id;
                            }
                            else {
                                issueUnified.cwe += ", ".concat(taxaData.id);
                            }
                        }
                    }
                    issueUnified.mainEvent = "N/A";
                    issueUnified.mainEventDescription = "N/A";
                    issueUnified.remediationEvent = "N/A";
                    issueUnified.remediationEventDescription = "N/A";
                    issueUnified.line = 1;
                    issueUnified.events = new Array();
                    if (issueEvents) {
                        issueUnified.line = issueEvents[0]["main-event-line-number"];
                        for (_m = 0, _o = issueEvents[0].events; _m < _o.length; _m++) {
                            event_1 = _o[_m];
                            if (event_1["event-type"] == "MAIN") {
                                issueUnified.mainEvent = event_1["event-tag"];
                                issueUnified.mainEventDescription = event_1["event-description"];
                            }
                            if (event_1["event-tag"] == "remediation") {
                                issueUnified.remediationEvent = event_1["event-tag"];
                                issueUnified.remediationEventDescription = event_1["event-description"];
                            }
                            issueUnifiedEvent = {};
                            issueUnifiedEvent.number = event_1["event-number"];
                            issueUnifiedEvent.tag = event_1["event-tag"];
                            issueUnifiedEvent.type = event_1["event-type"];
                            issueUnifiedEvent.description = event_1["event-description"];
                            issueUnifiedEvent["line-number"] = event_1["line-number"];
                            issueUnifiedEvent.filePath = event_1["filePath"];
                            issueUnifiedEvent["source-after"] = event_1["source-after"];
                            issueUnifiedEvent["source-before"] = event_1["source-before"];
                            issueUnified.events.push(issueUnifiedEvent);
                        }
                    }
                    issuesUnified.push(issueUnified);
                    _p.label = 10;
                case 10:
                    _i++;
                    return [3 /*break*/, 2];
                case 11: return [2 /*return*/, (issuesUnified)];
            }
        });
    });
}
exports.polarisGetIssuesUnified = polarisGetIssuesUnified;
function polarisGetIssues(polarisService, projectId, branchId, runId, compareBranchId, compareRunId, filterOpenOrClosed) {
    return __awaiter(this, void 0, void 0, function () {
        var complete, offset, limit, collected_issues, collected_includes, issues_page, issueReturn;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    complete = false;
                    offset = 0;
                    limit = 25;
                    collected_issues = Array();
                    collected_includes = Array();
                    _a.label = 1;
                case 1:
                    if (!!complete) return [3 /*break*/, 3];
                    return [4 /*yield*/, getIssuesPage(polarisService, projectId, branchId, runId, compareBranchId, compareRunId, filterOpenOrClosed, limit, offset)];
                case 2:
                    issues_page = _a.sent();
                    collected_issues = collected_issues.concat(issues_page.data);
                    collected_includes = collected_includes.concat(issues_page.included);
                    offset = offset + limit;
                    if (offset >= issues_page.meta.total) {
                        complete = true;
                    }
                    return [3 /*break*/, 1];
                case 3:
                    issueReturn = {};
                    issueReturn.issueData = collected_issues;
                    issueReturn.issueIncluded = collected_includes;
                    return [2 /*return*/, (issueReturn)];
            }
        });
    });
}
exports.polarisGetIssues = polarisGetIssues;
function getIssuesPage(polarisService, projectId, branchId, runId, compareBranchId, compareRunId, filterOpenOrClosed, limit, offset) {
    return __awaiter(this, void 0, void 0, function () {
        var issues_path, issues_data, issues;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    issues_path = "".concat(polarisService.polaris_url) +
                        "/api/query/v1/issues?page[limit]=".concat(limit) +
                        "&page[offset]=".concat(offset) +
                        "&project-id=".concat(projectId) +
                        "&include[issue][]=severity" +
                        "&include[issue][]=related-taxa";
                    if (branchId.length > 0) {
                        issues_path += "&branch-id=".concat(branchId);
                    }
                    if (runId.length > 0) {
                        issues_path += "&run-id=".concat(runId);
                    }
                    if (compareRunId && compareRunId.length > 0) {
                        issues_path += "&compare-run-id=".concat(compareRunId);
                    }
                    if (compareBranchId && compareBranchId.length > 0) {
                        issues_path += "&compare-branch-id=".concat(compareBranchId);
                    }
                    if (filterOpenOrClosed && filterOpenOrClosed.length > 0) {
                        //issues_path += `&filter[issue][status][$eq]=${filterOpenOrClosed}`
                        issues_path += "&filter%5Bissue%5D%5Bstatus%5D%5B%24eq%5D=".concat(filterOpenOrClosed);
                    }
                    //  // curl -X GET "https://sipse.polaris.synopsys.com/api/query/v1/issues?p
                    //  roject-id=f435f59c-5abb-4957-a725-28d93f0e645b
                    //  &branch-id=c7b567ee-39ae-4ca2-8d56-7496d29f32d8
                    //  &compare-branch-id=94f11f15-2892-4496-9245-b53b6d25ca10
                    //  &filter%5Bissue%5D%5Bstatus%5D%5B%24eq%5D=closed
                    //  &page%5Blimit%5D=50" -H "accept: application/vnd.api+json"
                    SIGLogger_1.logger.debug("Fetch issues from: ".concat(issues_path));
                    return [4 /*yield*/, polarisService.get_url(issues_path)
                        //logger.debug(`Polaris runs data for projectId ${projectId} and branchId ${branchId} ${JSON.stringify(issues_data.data, null, 2)}`)
                    ];
                case 1:
                    issues_data = _a.sent();
                    issues = issues_data.data;
                    return [2 /*return*/, (issues)];
            }
        });
    });
}
exports.getIssuesPage = getIssuesPage;
function polarisGetIssueTriage(polarisService, projectId, issueKey) {
    return __awaiter(this, void 0, void 0, function () {
        var triage_path, triage_data, triage;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    triage_path = "".concat(polarisService.polaris_url) +
                        "/api/triage-query/v1/triage-current/project-id%3A".concat(projectId) +
                        "%3Aissue-key%3A".concat(issueKey);
                    SIGLogger_1.logger.debug("Fetch issue triage from: ".concat(triage_path));
                    return [4 /*yield*/, polarisService.get_url(triage_path)
                        //logger.debug(`Polaris triage data for projectId ${projectId} and issueKey ${issueKey} ${JSON.stringify(triage_data.data, null, 2)}`)
                    ];
                case 1:
                    triage_data = _a.sent();
                    triage = triage_data.data;
                    return [2 /*return*/, (triage.data)];
            }
        });
    });
}
exports.polarisGetIssueTriage = polarisGetIssueTriage;
function polarisGetIssueEvents(polarisService, findingKey, runId) {
    return __awaiter(this, void 0, void 0, function () {
        var events_path, events_data, events;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    events_path = "".concat(polarisService.polaris_url) +
                        "/api/code-analysis/v0/events?finding-key=".concat(findingKey) +
                        "&run-id=".concat(runId);
                    SIGLogger_1.logger.debug("Fetch issue events from: ".concat(events_path));
                    return [4 /*yield*/, polarisService.get_url(events_path)];
                case 1:
                    events_data = _a.sent();
                    SIGLogger_1.logger.debug("Polaris events data for findingKey ".concat(findingKey, " and runId ").concat(runId, ": ").concat(JSON.stringify(events_data.data, null, 2)));
                    events = events_data.data;
                    return [2 /*return*/, (events.data)];
            }
        });
    });
}
exports.polarisGetIssueEvents = polarisGetIssueEvents;
function polarisGetIssueEventsWithSource(polarisService, findingKey, runId) {
    return __awaiter(this, void 0, void 0, function () {
        var events_with_source_path, events_with_source_data, events;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    events_with_source_path = "".concat(polarisService.polaris_url) +
                        "/api/code-analysis/v0/events-with-source?finding-key=".concat(findingKey) +
                        "&run-id=".concat(runId) +
                        "&occurrence-number=1" +
                        "&max-depth=10";
                    SIGLogger_1.logger.debug("Fetch issue events with source from: ".concat(events_with_source_path));
                    return [4 /*yield*/, polarisService.get_url(events_with_source_path)];
                case 1:
                    events_with_source_data = _a.sent();
                    SIGLogger_1.logger.debug("Polaris events with source data for findingKey ".concat(findingKey, " and runId ").concat(runId, ": ").concat(JSON.stringify(events_with_source_data.data, null, 2)));
                    events = events_with_source_data.data;
                    return [2 /*return*/, (events.data)];
            }
        });
    });
}
exports.polarisGetIssueEventsWithSource = polarisGetIssueEventsWithSource;
exports.POLARIS_PRESENT = 'PRESENT';
exports.POLARIS_NOT_PRESENT = 'NOT_PRESENT';
exports.POLARIS_UNKNOWN_FILE = 'Unknown File';
exports.POLARIS_COMMENT_PREFACE = '<!-- Comment managed by Synopsys Polaris, do not modify!';
function polarisCreateReviewCommentMessage(issue) {
    return "".concat(exports.POLARIS_COMMENT_PREFACE, "\n").concat(issue.key, "\n").concat(exports.POLARIS_PRESENT, "\n-->\n\n# Polaris Issue - ").concat(issue.name, "\n").concat(issue.mainEventDescription, " ").concat(issue.localEffect, " \n\n_").concat(issue.severity, " Impact, CWE ").concat(issue.cwe, " ").concat(issue.checkerName, "_\n\n").concat(issue.remediationEventDescription, "\n\n[View the issue in Polaris](").concat(issue.link, ")\n");
}
exports.polarisCreateReviewCommentMessage = polarisCreateReviewCommentMessage;
function polarisCreateIssueCommentMessage(issue) {
    var message = polarisCreateReviewCommentMessage(issue);
    return "".concat(message, "\n## Issue location\nThis issue was discovered outside the diff for this Pull Request. You can find it in Polaris.\n");
}
exports.polarisCreateIssueCommentMessage = polarisCreateIssueCommentMessage;
function polarisIsInDiff(issue, diffMap) {
    var diffHunks = diffMap.get(issue.path);
    if (!diffHunks) {
        return false;
    }
    return diffHunks.filter(function (hunk) { return hunk.firstLine <= issue.line; }).some(function (hunk) { return issue.line <= hunk.lastLine; });
}
exports.polarisIsInDiff = polarisIsInDiff;
function polarisGetTriageValue(attribute_name, triage_values) {
    return __awaiter(this, void 0, void 0, function () {
        var _i, triage_values_1, value;
        return __generator(this, function (_a) {
            for (_i = 0, triage_values_1 = triage_values; _i < triage_values_1.length; _i++) {
                value = triage_values_1[_i];
                if (attribute_name == value["attribute-semantic-id"]) {
                    return [2 /*return*/, value];
                }
            }
            return [2 /*return*/, Promise.reject()];
        });
    });
}
exports.polarisGetTriageValue = polarisGetTriageValue;
function polarisCreateNoLongerPresentMessage(existingMessage, asOf) {
    var existingMessageLines = existingMessage.split('\n');
    return "".concat(existingMessageLines[0], "\n").concat(existingMessageLines[1], "\n").concat(exports.POLARIS_NOT_PRESENT, "\n-->\n\nPolaris issue no longer present as of: ").concat(asOf, "\n<details>\n<summary>Show issue</summary>\n\n").concat(existingMessageLines.slice(4).join('\n'), "\n</details>");
}
exports.polarisCreateNoLongerPresentMessage = polarisCreateNoLongerPresentMessage;
