"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ProxyAgent = require("proxy-agent");
var HttpsProxyAgent = require("https-proxy-agent");
var url = require('url');
var Axios = require('axios');
var moment = require("moment");
var CancelToken = Axios.CancelToken;
var fs = require('fs');
var json_path = require('jsonpath');
var debug = require('debug');
var PolarisService = /** @class */ (function () {
    function PolarisService(log, connection) {
        if (connection.url.endsWith("/") || connection.url.endsWith("\\")) {
            this.polaris_url = connection.url.slice(0, -1);
        }
        else {
            this.polaris_url = connection.url;
        }
        this.access_token = connection.token;
        this.bearer_token = null;
        this.headers = null;
        this.log = log;
        if (connection.proxy != undefined) {
            log.info("Using Proxy URL: ".concat(connection.proxy.proxy_url));
            var proxyOpts = url.parse(connection.proxy.proxy_url);
            var proxyConfig = {
                host: proxyOpts.hostname,
                port: proxyOpts.port
            };
            if (connection.proxy.proxy_username && connection.proxy.proxy_password) {
                log.info("Using configured proxy credentials.");
                proxyConfig.auth = connection.proxy.proxy_username + ":" + connection.proxy.proxy_password;
            }
            var httpsAgent = new HttpsProxyAgent(proxyConfig);
            this.axios = Axios.create({ httpsAgent: httpsAgent });
        }
        else {
            this.axios = Axios.create();
        }
    }
    PolarisService.prototype.authenticate = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.log.info("Authenticating with Polaris Software Integrity Platform.");
                        debug.enable('https-proxy-agent');
                        _a = this;
                        return [4 /*yield*/, this.fetch_bearer_token()];
                    case 1:
                        _a.bearer_token = _b.sent();
                        debug.disable();
                        this.headers = {
                            Authorization: "Bearer ".concat(this.bearer_token)
                        };
                        return [2 /*return*/];
                }
            });
        });
    };
    PolarisService.prototype.get_job = function (job_status_url) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.axios.get(job_status_url, {
                            headers: this.headers
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PolarisService.prototype.fetch_bearer_token = function () {
        var _this = this;
        // this is a workaround for https://github.com/TooTallNate/node-https-proxy-agent/issues/102
        //basically NodeJS thinks all event loops are closed, this ensures the event look hasn't closed. 
        // TODO: Need to switch to a new http library that doesn't suffer from this bug.
        //Basically we need to reject the promise ourselves 
        var resultPromise = new Promise(function (resolve, reject) {
            var timeout = 10000;
            setTimeout(function () { reject(new Error("Failed to authenticate with Polaris Software Integrity Platform. This may be a problem with your url, proxy setup or network.")); }, timeout);
            var authenticateUrl = _this.polaris_url + "/api/auth/authenticate";
            try {
                _this.axios.post(authenticateUrl, "accesstoken=" + _this.access_token, { timeout: 10000, headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }).then(function (authResponse) {
                    if (authResponse.data.jwt) {
                        _this.log.info("Succesfully authenticated, saving bearer token.");
                        resolve(authResponse.data.jwt);
                    }
                    else {
                        _this.log.error("Failed to authenticate with Polaris Software Integrity Platform, no bearer token received.");
                        reject(new Error("Failed to authenticate with Polaris Software Integrity Platform. Status: ".concat(authResponse.status, " Reason: ").concat(authResponse.statusText)));
                    }
                }).catch(function (e) {
                    _this.log.error("Unable to authenticate with Polaris Software Integrity Platform at url: ".concat(authenticateUrl));
                    _this.log.error("This may be a problem with your Polaris Software Integrity Platform url, proxy setup or network.");
                    reject(e);
                });
            }
            catch (e) {
                _this.log.error("Unable to authenticate with Polaris Software Integrity Platform at url: ".concat(authenticateUrl));
                _this.log.error("This may be a problem with your Polaris Software Integrity Platform url, proxy setup or network.");
                reject(e);
            }
        });
        return resultPromise;
    };
    PolarisService.prototype.fetch_cli_modified_date = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var token, self;
            var _this = this;
            return __generator(this, function (_a) {
                token = CancelToken.source();
                self = this;
                self.log.debug("Fetching cli modified date from: " + url);
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        _this.axios({
                            url: url,
                            method: 'GET',
                            responseType: 'stream',
                            cancelToken: token.token
                        }).then(function (response) {
                            var lastModifiedText = response.headers['last-modified'];
                            self.log.debug("Last Modified Header: " + lastModifiedText);
                            var lastModifiedDate = moment(lastModifiedText);
                            self.log.debug("Last Modified Date: " + lastModifiedDate.format());
                            token.cancel();
                            resolve(lastModifiedDate);
                        }).catch(function (error) {
                            reject(error);
                        });
                    })];
            });
        });
    };
    PolarisService.prototype.fetch_issue_data = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.axios.get(url, {
                            headers: this.headers
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PolarisService.prototype.get_url = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.axios.get(url, {
                            headers: this.headers
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    PolarisService.prototype.fetch_organization_name = function () {
        return __awaiter(this, void 0, void 0, function () {
            var target, result, organization_names;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        target = this.polaris_url + "/api/auth/contexts";
                        return [4 /*yield*/, this.axios({
                                url: target,
                                method: 'GET',
                                responseType: 'json',
                                headers: this.headers,
                            })];
                    case 1:
                        result = _a.sent();
                        organization_names = json_path.query(result.data, "$.data[*].attributes.organizationname");
                        if (organization_names.length > 0) {
                            return [2 /*return*/, organization_names[0]];
                        }
                        else {
                            return [2 /*return*/, null];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PolarisService.prototype.download_cli = function (url, file) {
        return __awaiter(this, void 0, void 0, function () {
            var writer, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.log.debug("Downloading cli from: " + url);
                        this.log.debug("Downloading cli to: " + file);
                        writer = fs.createWriteStream(file);
                        return [4 /*yield*/, this.axios({
                                url: url,
                                method: 'GET',
                                responseType: 'stream'
                            })];
                    case 1:
                        response = _a.sent();
                        response.data.pipe(writer);
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                writer.on('finish', resolve);
                                writer.on('error', reject);
                            })];
                }
            });
        });
    };
    return PolarisService;
}());
exports.default = PolarisService;
