"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var os = __importStar(require("os"));
var PolarisPlatformSupport = /** @class */ (function () {
    function PolarisPlatformSupport() {
    }
    PolarisPlatformSupport.prototype.platform_specific_cli_zip_url_fragment = function (client) {
        var platform = os.platform();
        if (platform == "win32") {
            return "/api/tools/" + client + "_cli-win64.zip";
        }
        else if (platform == "darwin") {
            return "/api/tools/" + client + "_cli-macosx.zip";
        }
        else {
            return "/api/tools/" + client + "_cli-linux64.zip";
        }
    };
    PolarisPlatformSupport.prototype.platform_specific_executable_name = function (client) {
        var platform = os.platform();
        if (platform == "win32") {
            return client + ".exe";
        }
        else {
            return client;
        }
    };
    return PolarisPlatformSupport;
}());
exports.default = PolarisPlatformSupport;
