"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var PolarisRunResult_1 = __importDefault(require("../model/PolarisRunResult"));
var fs = require('fs');
var fse = require('fs-extra');
var path = require('path');
var urlParser = require('url');
var SIGLogger_1 = require("../../SIGLogger");
var exec_1 = require("@actions/exec");
var PolarisRunner = /** @class */ (function () {
    function PolarisRunner(log) {
        this.log = log;
    }
    PolarisRunner.prototype.execute_cli = function (connection, polaris_install, cwd, build_command) {
        return __awaiter(this, void 0, void 0, function () {
            var env, proxyOpts, override_home, return_code, synopsysFolder, polarisFolder, scanJsonFile;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        env = process.env;
                        env["POLARIS_SERVER_URL"] = connection.url;
                        env["POLARIS_ACCESS_TOKEN"] = connection.token;
                        if (connection.proxy != undefined) {
                            proxyOpts = urlParser.parse(connection.proxy.proxy_url);
                            if (connection.proxy.proxy_username && connection.proxy.proxy_password) {
                                proxyOpts.auth = connection.proxy.proxy_username + ":" + connection.proxy.proxy_password;
                            }
                            env["HTTPS_PROXY"] = urlParser.format(proxyOpts);
                        }
                        if ("POLARIS_HOME" in env) {
                            this.log.info("A POLARIS_HOME exists, will not attempt to override.");
                        }
                        else {
                            override_home = polaris_install.polaris_home;
                            if (!fs.existsSync(override_home)) {
                                this.log.info("Creating plugin Polaris home: " + override_home);
                                fse.ensureDirSync(override_home);
                            }
                            else {
                                this.log.debug("Polaris home already exists, it will not be created.");
                            }
                            if (fs.existsSync(override_home)) {
                                this.log.info("Set POLARIS_HOME to directory: " + override_home);
                                env["POLARIS_HOME"] = override_home;
                            }
                            else {
                                this.log.error("Unable to create a POLARIS_HOME and env variable was not set. Will not override. Try creating POLARIS_HOME on the agent or ensuring agent has access.");
                            }
                        }
                        SIGLogger_1.logger.info("Executing ".concat(polaris_install.polaris_executable, " with line=").concat(build_command));
                        return [4 /*yield*/, (0, exec_1.exec)(polaris_install.polaris_executable, build_command.split(' '), { ignoreReturnCode: true })];
                    case 1:
                        return_code = _a.sent();
                        synopsysFolder = path.join(cwd, ".synopsys");
                        polarisFolder = path.join(synopsysFolder, "polaris");
                        scanJsonFile = path.join(polarisFolder, "cli-scan.json");
                        delete process.env["HTTPS_PROXY"];
                        return [2 /*return*/, new PolarisRunResult_1.default(return_code, scanJsonFile)];
                }
            });
        });
    };
    return PolarisRunner;
}());
exports.default = PolarisRunner;
