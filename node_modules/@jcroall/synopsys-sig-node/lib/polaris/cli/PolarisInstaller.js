"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var PolarisExecutableFinder_1 = __importDefault(require("./PolarisExecutableFinder"));
var PolarisPlatformSupport_1 = __importDefault(require("../util/PolarisPlatformSupport"));
var PolarisInstall_1 = __importDefault(require("../model/PolarisInstall"));
var moment = require("moment");
var fs = require('fs');
var path = require('path');
var fse = require('fs-extra');
var zipper = require('adm-zip');
var PolarisInstaller = /** @class */ (function () {
    function PolarisInstaller(log, executable_finder, platform_support, polaris_service) {
        this.log = log;
        this.executable_finder = executable_finder;
        this.platform_support = platform_support;
        this.polaris_service = polaris_service;
    }
    PolarisInstaller.default_installer = function (log, polaris_service) {
        var platform_support = new PolarisPlatformSupport_1.default();
        var executable_finder = new PolarisExecutableFinder_1.default(log, platform_support);
        return new PolarisInstaller(log, executable_finder, platform_support, polaris_service);
    };
    PolarisInstaller.prototype.install_or_locate_polaris = function (polaris_url, polaris_install_path) {
        return __awaiter(this, void 0, void 0, function () {
            var polaris_cli_name, polaris_cli_location, version_file, relative_cli_url, cli_url, synopsys_path, polaris_home, download_cli, available_version_date, current_version_date, polaris_zip, zip, polaris_exe;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        polaris_cli_name = "polaris";
                        polaris_cli_location = path.resolve(polaris_install_path, "polaris");
                        version_file = path.join(polaris_cli_location, "version.txt");
                        relative_cli_url = this.platform_support.platform_specific_cli_zip_url_fragment(polaris_cli_name);
                        cli_url = polaris_url + relative_cli_url;
                        synopsys_path = path.resolve(polaris_install_path, ".synopsys");
                        polaris_home = path.resolve(synopsys_path, "polaris");
                        this.log.info("Using polaris cli location: " + polaris_cli_location);
                        this.log.info("Using polaris cli url: " + cli_url);
                        this.log.debug("Checking for version file: " + version_file);
                        download_cli = false;
                        return [4 /*yield*/, this.polaris_service.fetch_cli_modified_date(cli_url)];
                    case 1:
                        available_version_date = _a.sent();
                        if (fs.existsSync(version_file)) {
                            this.log.debug("Version file exists.");
                            current_version_date = moment(fs.readFileSync(version_file, { encoding: 'utf8' }));
                            this.log.debug("Current version: " + current_version_date.format());
                            this.log.debug("Available version: " + available_version_date.format());
                            if (current_version_date.isBefore(available_version_date)) {
                                this.log.info("Downloading Polaris CLI because a newer version is available.");
                                download_cli = true;
                            }
                            else {
                                this.log.info("Existing Polaris CLI will be used.");
                            }
                        }
                        else {
                            this.log.info("Downloading Polaris CLI because a version file did not exist.");
                            download_cli = true;
                        }
                        if (!download_cli) return [3 /*break*/, 4];
                        if (fs.existsSync(polaris_cli_location)) {
                            this.log.info("Cleaning up the Polaris installation directory: ".concat(polaris_cli_location));
                            this.log.info("Please do not place anything in this folder, it is under extension control.");
                            fse.removeSync(polaris_cli_location);
                        }
                        this.log.info("Starting download.");
                        polaris_zip = path.join(polaris_install_path, "polaris.zip");
                        return [4 /*yield*/, this.polaris_service.download_cli(cli_url, polaris_zip)];
                    case 2:
                        _a.sent();
                        this.log.info("Starting extraction.");
                        zip = new zipper(polaris_zip);
                        return [4 /*yield*/, zip.extractAllTo(polaris_cli_location, /*overwrite*/ true)];
                    case 3:
                        _a.sent();
                        this.log.info("Download and extraction finished.");
                        fse.ensureFileSync(version_file);
                        fs.writeFileSync(version_file, available_version_date.format(), 'utf8');
                        this.log.info("Wrote version file: ".concat(version_file));
                        _a.label = 4;
                    case 4:
                        this.log.info("Looking for Polaris executable.");
                        return [4 /*yield*/, this.executable_finder.find_executable(polaris_cli_location)];
                    case 5:
                        polaris_exe = _a.sent();
                        this.log.info("Found executable: " + polaris_exe);
                        return [2 /*return*/, new PolarisInstall_1.default(polaris_exe, polaris_home)];
                }
            });
        });
    };
    return PolarisInstaller;
}());
exports.default = PolarisInstaller;
