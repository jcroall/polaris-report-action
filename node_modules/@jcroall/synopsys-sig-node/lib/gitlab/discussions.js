"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.gitlabCreateDiscussion = exports.gitlabCreateDiscussionWithoutPosition = exports.gitlabUpdateNote = exports.gitlabGetDiscussions = void 0;
var node_1 = require("@gitbeaker/node");
var SIGLogger_1 = require("../SIGLogger");
function gitlabGetDiscussions(gitlab_url, gitlab_token, project_id, merge_request_iid) {
    var _a, _b, _c, _d, _e, _f, _g;
    return __awaiter(this, void 0, void 0, function () {
        var api, merge_request, discussions, _i, discussions_1, discussion, _h, _j, note;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    api = new node_1.Gitlab({ token: gitlab_token });
                    SIGLogger_1.logger.debug("Getting merge request #".concat(merge_request_iid, " in project #").concat(project_id));
                    return [4 /*yield*/, api.MergeRequests.show(project_id, merge_request_iid)];
                case 1:
                    merge_request = _k.sent();
                    SIGLogger_1.logger.debug("Merge Request title is ".concat(merge_request.title));
                    SIGLogger_1.logger.debug("Merge request SHA is ".concat(merge_request.sha));
                    return [4 /*yield*/, api.MergeRequestDiscussions.all(project_id, merge_request_iid)];
                case 2:
                    discussions = _k.sent();
                    for (_i = 0, discussions_1 = discussions; _i < discussions_1.length; _i++) {
                        discussion = discussions_1[_i];
                        SIGLogger_1.logger.debug("Discussion ".concat(discussion.id));
                        if (discussion.notes) {
                            for (_h = 0, _j = discussion.notes; _h < _j.length; _h++) {
                                note = _j[_h];
                                SIGLogger_1.logger.debug("  body=".concat(note.body));
                                SIGLogger_1.logger.debug("  base_sha=".concat((_a = note.position) === null || _a === void 0 ? void 0 : _a.base_sha, " head_sha=").concat((_b = note.position) === null || _b === void 0 ? void 0 : _b.head_sha, " start_sha=").concat((_c = note.position) === null || _c === void 0 ? void 0 : _c.start_sha));
                                SIGLogger_1.logger.debug("  position_type=".concat((_d = note.position) === null || _d === void 0 ? void 0 : _d.position_type, " new_path=").concat((_e = note.position) === null || _e === void 0 ? void 0 : _e.new_path, " old_path=").concat((_f = note.position) === null || _f === void 0 ? void 0 : _f.old_path));
                                SIGLogger_1.logger.debug("  new_line=".concat((_g = note.position) === null || _g === void 0 ? void 0 : _g.new_line));
                            }
                        }
                    }
                    return [2 /*return*/, discussions];
            }
        });
    });
}
exports.gitlabGetDiscussions = gitlabGetDiscussions;
function gitlabUpdateNote(gitlab_url, gitlab_token, project_id, merge_request_iid, discussion_id, note_id, body) {
    return __awaiter(this, void 0, void 0, function () {
        var api;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    api = new node_1.Gitlab({ token: gitlab_token });
                    SIGLogger_1.logger.debug("Update discussion #".concat(discussion_id, " note #").concat(note_id, " for merge request #").concat(merge_request_iid, " in project #").concat(project_id, " "));
                    SIGLogger_1.logger.debug("new body is: ".concat(body));
                    return [4 /*yield*/, api.MergeRequestDiscussions.editNote(project_id, merge_request_iid, discussion_id, note_id, { body: body })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.gitlabUpdateNote = gitlabUpdateNote;
function gitlabCreateDiscussionWithoutPosition(gitlab_url, gitlab_token, project_id, merge_request_iid, body) {
    return __awaiter(this, void 0, void 0, function () {
        var api;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    api = new node_1.Gitlab({ token: gitlab_token });
                    SIGLogger_1.logger.debug("Create new discussion for merge request #".concat(merge_request_iid, " in project #").concat(project_id));
                    return [4 /*yield*/, api.MergeRequestDiscussions.create(project_id, merge_request_iid, body)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.gitlabCreateDiscussionWithoutPosition = gitlabCreateDiscussionWithoutPosition;
function gitlabCreateDiscussion(gitlab_url, gitlab_token, project_id, merge_request_iid, line, filename, body, base_sha, commit_sha) {
    return __awaiter(this, void 0, void 0, function () {
        var api, merge_request;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    api = new node_1.Gitlab({ token: gitlab_token });
                    return [4 /*yield*/, api.MergeRequests.show(project_id, merge_request_iid)];
                case 1:
                    merge_request = _a.sent();
                    SIGLogger_1.logger.debug("XX Create new discussion for merge request #".concat(merge_request_iid, " in project #").concat(project_id));
                    return [4 /*yield*/, api.MergeRequestDiscussions.create(project_id, merge_request_iid, body, {
                            position: {
                                position_type: "text",
                                base_sha: base_sha,
                                head_sha: merge_request.sha,
                                start_sha: base_sha,
                                new_path: filename,
                                old_path: filename,
                                new_line: line.toString()
                            }
                        })
                        //let merge_request = await api.MergeRequests.show(project_id, merge_request_iid)
                        // JC: GitBeaker isn't working for this case (filed https://github.com/jdalrymple/gitbeaker/issues/2396)
                        // Working around using bare REST query
                        /*
                        let options: BaseRequestOptions = <BaseRequestOptions>{}
                        options['body'] = body
                        options['position[position_type]'] = "text"
                        options['position[base_sha]'] = base_sha
                        options['position[start_sha]'] = base_sha
                        options['position[head_sha]'] = commit_sha
                        options['position[new_path]'] = filename
                        options['position[old_path]'] = filename
                        options['position[new_line]'] = line.toString()
                    
                        logger.debug(`Before MRD.create`)
                        api.MergeRequestDiscussions.create(project_id, merge_request_iid, body, options)
                        logger.debug(`After MRD.create`)
                    
                        */
                        /*
                        const FormData = require('form-data');
                        const formData = new FormData();
                        formData.append("body", body)
                        formData.append("position[position_type]", "text")
                        formData.append("position[base_sha]", base_sha)
                        formData.append("position[start_sha]", base_sha)
                        //formData.append("position[head_sha]", merge_request.sha)
                        formData.append("position[head_sha]", commit_sha)
                        formData.append("position[new_path]", filename)
                        formData.append("position[old_path]", filename)
                        formData.append("position[new_line]", line.toString())
                    
                        let headers = {
                            "PRIVATE-TOKEN": gitlab_token,
                            'content-type': `multipart/form-data; boundary=${formData._boundary}`
                        }
                    
                        logger.info(`headers=${headers}`)
                    
                        let url = `${gitlab_url}/api/v4/projects/${project_id}/merge_requests/${merge_request_iid}/discussions`
                    
                        logger.info(`url=${url}`)
                    
                        let res = undefined
                        try {
                            res = await axios.post(url,
                                formData, {
                                    headers: headers
                                })
                    
                            logger.info(`res=${res.status} res=${res.data} status=${res.statusText} h=${res.headers}`)
                    
                            if (res.status > 201) {
                                logger.error(`Unable to create discussion for ${filename}:${line} at ${url}`)
                                logger.info(`ERROR`)
                                return false
                            }
                    
                        } catch (error: any) {
                            // we'll proceed, but let's report it
                            logger.info(`ERROR: ${error.message}`)
                        }
                    
                    
                        logger.info(`OK`)
                    
                        return true
                        */
                    ];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.gitlabCreateDiscussion = gitlabCreateDiscussion;
