"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.azCreateReviewComment = exports.azUpdateComment = exports.azGetExistingReviewThreads = exports.UNKNOWN_FILE = void 0;
exports.UNKNOWN_FILE = 'Unknown File';
function azGetExistingReviewThreads(git_agent, repo_id, pull_id) {
    return __awaiter(this, void 0, void 0, function () {
        var threads, _i, threads_1, thread, _a, _b, comment;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    threads = [];
                    return [4 /*yield*/, git_agent.getThreads(repo_id, pull_id)];
                case 1:
                    threads = _c.sent();
                    if (threads && threads.length > 0) {
                        for (_i = 0, threads_1 = threads; _i < threads_1.length; _i++) {
                            thread = threads_1[_i];
                            //logger.info(`DEBUG: thread id=${thread.id}`)
                            if (thread.comments) {
                                for (_a = 0, _b = thread.comments; _a < _b.length; _a++) {
                                    comment = _b[_a];
                                    //logger.info(`DEBUG: comment=${comment.content}`)
                                }
                            }
                        }
                    }
                    return [2 /*return*/, threads];
            }
        });
    });
}
exports.azGetExistingReviewThreads = azGetExistingReviewThreads;
function azUpdateComment(git_agent, repo_id, pull_id, thread_id, comment_id, comment_body) {
    return __awaiter(this, void 0, void 0, function () {
        var updated_comment, comment;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    updated_comment = {};
                    updated_comment.content = comment_body;
                    return [4 /*yield*/, git_agent.updateComment(updated_comment, repo_id, pull_id, thread_id, comment_id)];
                case 1:
                    comment = _a.sent();
                    return [2 /*return*/, true];
            }
        });
    });
}
exports.azUpdateComment = azUpdateComment;
function azCreateReviewComment(git_agent, repo_id, pull_id, issue, comment_body) {
    return __awaiter(this, void 0, void 0, function () {
        var comment, thread, new_thread;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    comment = {};
                    comment.content = comment_body;
                    comment.parentCommentId = 0;
                    comment.commentType = 1;
                    thread = {};
                    thread.threadContext = {};
                    thread.threadContext.filePath = "/" + issue.filepath;
                    thread.threadContext.rightFileStart = {};
                    thread.threadContext.rightFileStart.line = issue.location.start.line;
                    thread.threadContext.rightFileStart.offset = 1;
                    thread.threadContext.rightFileEnd = {};
                    thread.threadContext.rightFileEnd.line = issue.location.start.line;
                    thread.threadContext.rightFileEnd.offset = 1;
                    thread.status = 1; // Active
                    thread.comments = [comment];
                    return [4 /*yield*/, git_agent.createThread(thread, repo_id, pull_id)];
                case 1:
                    new_thread = _a.sent();
                    return [2 /*return*/, true];
            }
        });
    });
}
exports.azCreateReviewComment = azCreateReviewComment;
