import { IRestResponse } from 'typed-rest-client/RestClient';
export interface IBlackduckView {
    _meta: {
        href: string;
    };
}
export interface IBlackduckItemArray<Type> extends IBlackduckView {
    totalCount: number;
    items: Array<Type>;
}
export interface IUpgradeGuidance {
    version: string;
    shortTerm: IRecommendedVersion;
    longTerm: IRecommendedVersion;
}
export interface IRecommendedVersion {
    version: string;
    versionName: string;
    vulnerabilityRisk: Object;
}
export interface IComponentSearchResult {
    version: string;
}
export interface IComponentVersion {
    license: {
        licenses: {
            license: string;
            name: string;
        }[];
    };
    _meta: {
        href: string;
    };
}
export interface IComponentVulnerability {
    name: string;
    severity: string;
    useCvss3: boolean;
    cvss2: ICvssView;
    cvss3: ICvssView;
    _meta: {
        href: string;
    };
}
export interface ICvssView {
    baseScore: number;
    severity: string;
}
export interface IRapidScanResults {
    componentName: string;
    versionName: string;
    componentIdentifier: string;
    violatingPolicyNames: string[];
    policyViolationVulnerabilities: IRapidScanVulnerability[];
    policyViolationLicenses: IRapidScanLicense[];
    _meta: {
        href: string;
    };
}
export interface IRapidScanVulnerability {
    name: string;
}
export interface IRapidScanLicense {
    licenseName: string;
    _meta: {
        href: string;
    };
}
export declare class BlackduckApiService {
    blackduckUrl: string;
    blackduckApiToken: string;
    constructor(blackduckUrl: string, blackduckApiToken: string);
    getBearerToken(): Promise<string>;
    checkIfEnabledBlackduckPoliciesExist(bearerToken: string): Promise<boolean>;
    getUpgradeGuidanceFor(bearerToken: string, componentVersion: IComponentVersion): Promise<IRestResponse<IUpgradeGuidance>>;
    getComponentsMatching(bearerToken: string, componentIdentifier: string, limit?: number): Promise<IRestResponse<IBlackduckItemArray<IComponentSearchResult>>>;
    getComponentVersion(bearerToken: string, searchResult: IComponentSearchResult): Promise<IRestResponse<unknown>>;
    getComponentVersionMatching(bearerToken: string, componentIdentifier: string, limit?: number): Promise<IComponentVersion | null>;
    getComponentVulnerabilties(bearerToken: string, componentVersion: IComponentVersion): Promise<IRestResponse<IBlackduckItemArray<IComponentVulnerability>>>;
    getPolicies(bearerToken: string, limit?: number, enabled?: boolean): Promise<IRestResponse<IBlackduckItemArray<any>>>;
    requestPage(bearerToken: string, requestPath: string, offset: number, limit: number): Promise<IRestResponse<IBlackduckItemArray<any>>>;
    get<Type>(bearerToken: string, requestUrl: string, acceptHeader?: string): Promise<IRestResponse<Type>>;
}
export declare function cleanUrl(blackduckUrl: string): string;
