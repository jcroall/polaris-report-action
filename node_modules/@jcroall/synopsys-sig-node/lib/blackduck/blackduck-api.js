"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanUrl = exports.BlackduckApiService = void 0;
var Handlers_1 = require("typed-rest-client/Handlers");
var HttpClient_1 = require("typed-rest-client/HttpClient");
var RestClient_1 = require("typed-rest-client/RestClient");
var SIGLogger_1 = require("../SIGLogger");
var APPLICATION_NAME = "Synopsys SIG Library for Node.js";
var BlackduckApiService = /** @class */ (function () {
    function BlackduckApiService(blackduckUrl, blackduckApiToken) {
        this.blackduckUrl = cleanUrl(blackduckUrl);
        this.blackduckApiToken = blackduckApiToken;
    }
    BlackduckApiService.prototype.getBearerToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var authenticationClient, authorizationHeader;
            return __generator(this, function (_a) {
                SIGLogger_1.logger.info('Initiating authentication request to Black Duck...');
                authenticationClient = new HttpClient_1.HttpClient(APPLICATION_NAME);
                authorizationHeader = { Authorization: "token ".concat(this.blackduckApiToken) };
                return [2 /*return*/, authenticationClient
                        .post("".concat(this.blackduckUrl, "/api/tokens/authenticate"), '', authorizationHeader)
                        .then(function (authenticationResponse) { return authenticationResponse.readBody(); })
                        .then(function (responseBody) { return JSON.parse(responseBody); })
                        .then(function (responseBodyJson) {
                        SIGLogger_1.logger.info('Successfully authenticated with Black Duck');
                        return responseBodyJson.bearerToken;
                    })];
            });
        });
    };
    BlackduckApiService.prototype.checkIfEnabledBlackduckPoliciesExist = function (bearerToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                SIGLogger_1.logger.debug('Requesting policies from Black Duck...');
                return [2 /*return*/, this.getPolicies(bearerToken, 1, true).then(function (blackduckPolicyPage) {
                        var _a;
                        var policyCount = (_a = blackduckPolicyPage === null || blackduckPolicyPage === void 0 ? void 0 : blackduckPolicyPage.result) === null || _a === void 0 ? void 0 : _a.totalCount;
                        if (policyCount === undefined || policyCount === null) {
                            SIGLogger_1.logger.warn('Failed to check Black Duck for policies');
                            return false;
                        }
                        else if (policyCount > 0) {
                            SIGLogger_1.logger.debug("".concat(policyCount, " Black Duck policies existed"));
                            return true;
                        }
                        else {
                            SIGLogger_1.logger.info('No Black Duck policies exist');
                            return false;
                        }
                    })];
            });
        });
    };
    BlackduckApiService.prototype.getUpgradeGuidanceFor = function (bearerToken, componentVersion) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(bearerToken, "".concat(componentVersion._meta.href, "/upgrade-guidance"))];
            });
        });
    };
    BlackduckApiService.prototype.getComponentsMatching = function (bearerToken, componentIdentifier, limit) {
        if (limit === void 0) { limit = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var requestPath;
            return __generator(this, function (_a) {
                requestPath = "/api/components?q=".concat(componentIdentifier);
                return [2 /*return*/, this.requestPage(bearerToken, requestPath, 0, limit)];
            });
        });
    };
    BlackduckApiService.prototype.getComponentVersion = function (bearerToken, searchResult) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(bearerToken, searchResult.version)];
            });
        });
    };
    BlackduckApiService.prototype.getComponentVersionMatching = function (bearerToken, componentIdentifier, limit) {
        var _a;
        if (limit === void 0) { limit = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var componentSearchResponse, firstMatchingComponentVersionUrl, componentVersion, componentVersionResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getComponentsMatching(bearerToken, componentIdentifier, limit)];
                    case 1:
                        componentSearchResponse = _b.sent();
                        firstMatchingComponentVersionUrl = (_a = componentSearchResponse === null || componentSearchResponse === void 0 ? void 0 : componentSearchResponse.result) === null || _a === void 0 ? void 0 : _a.items[0].version;
                        componentVersion = null;
                        if (!(firstMatchingComponentVersionUrl !== undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.get(bearerToken, firstMatchingComponentVersionUrl)];
                    case 2:
                        componentVersionResponse = _b.sent();
                        componentVersion = componentVersionResponse === null || componentVersionResponse === void 0 ? void 0 : componentVersionResponse.result;
                        _b.label = 3;
                    case 3: return [2 /*return*/, componentVersion];
                }
            });
        });
    };
    BlackduckApiService.prototype.getComponentVulnerabilties = function (bearerToken, componentVersion) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(bearerToken, "".concat(componentVersion._meta.href, "/vulnerabilities"), 'application/vnd.blackducksoftware.vulnerability-4+json')];
            });
        });
    };
    BlackduckApiService.prototype.getPolicies = function (bearerToken, limit, enabled) {
        if (limit === void 0) { limit = 10; }
        return __awaiter(this, void 0, void 0, function () {
            var enabledFilter, requestPath;
            return __generator(this, function (_a) {
                enabledFilter = enabled === undefined || enabled === null ? '' : "filter=policyRuleEnabled%3A".concat(enabled);
                requestPath = "/api/policy-rules?".concat(enabledFilter);
                return [2 /*return*/, this.requestPage(bearerToken, requestPath, 0, limit)];
            });
        });
    };
    BlackduckApiService.prototype.requestPage = function (bearerToken, requestPath, offset, limit) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(bearerToken, "".concat(this.blackduckUrl).concat(requestPath, "&offset=").concat(offset, "&limit=").concat(limit))];
            });
        });
    };
    BlackduckApiService.prototype.get = function (bearerToken, requestUrl, acceptHeader) {
        return __awaiter(this, void 0, void 0, function () {
            var bearerTokenHandler, blackduckRestClient;
            return __generator(this, function (_a) {
                bearerTokenHandler = new Handlers_1.BearerCredentialHandler(bearerToken, true);
                blackduckRestClient = new RestClient_1.RestClient(APPLICATION_NAME, this.blackduckUrl, [bearerTokenHandler]);
                return [2 /*return*/, blackduckRestClient.get(requestUrl, { acceptHeader: acceptHeader })];
            });
        });
    };
    return BlackduckApiService;
}());
exports.BlackduckApiService = BlackduckApiService;
function cleanUrl(blackduckUrl) {
    if (blackduckUrl && blackduckUrl.endsWith('/')) {
        return blackduckUrl.substr(0, blackduckUrl.length - 1);
    }
    return blackduckUrl;
}
exports.cleanUrl = cleanUrl;
