"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitHubCheck = exports.githubCreateCheck = void 0;
var core_1 = require("@actions/core");
var github_1 = require("@actions/github");
var SIGLogger_1 = require("../SIGLogger");
var github_context_1 = require("./github-context");
function githubCreateCheck(checkName, githubToken) {
    return __awaiter(this, void 0, void 0, function () {
        var octokit, head_sha, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    octokit = (0, github_1.getOctokit)(githubToken);
                    head_sha = (0, github_context_1.githubGetSha)();
                    SIGLogger_1.logger.info("Creating ".concat(checkName, "..."));
                    return [4 /*yield*/, octokit.rest.checks.create({
                            owner: github_1.context.repo.owner,
                            repo: github_1.context.repo.repo,
                            name: checkName,
                            head_sha: head_sha
                        })];
                case 1:
                    response = _a.sent();
                    if (response.status !== 201) {
                        SIGLogger_1.logger.warn("Unexpected status code recieved when creating ".concat(checkName, ": ").concat(response.status));
                        SIGLogger_1.logger.debug(JSON.stringify(response, null, 2));
                    }
                    else {
                        SIGLogger_1.logger.info("".concat(checkName, " created"));
                    }
                    return [2 /*return*/, new GitHubCheck(checkName, response.data.id, githubToken)];
            }
        });
    });
}
exports.githubCreateCheck = githubCreateCheck;
var GitHubCheck = /** @class */ (function () {
    function GitHubCheck(checkName, checkRunId, githubToken) {
        this.checkName = checkName;
        this.checkRunId = checkRunId;
        this.githubToken = githubToken;
    }
    GitHubCheck.prototype.passCheck = function (summary, text) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.finishCheck('success', summary, text)];
            });
        });
    };
    GitHubCheck.prototype.failCheck = function (summary, text) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.finishCheck('failure', summary, text)];
            });
        });
    };
    GitHubCheck.prototype.skipCheck = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.finishCheck('skipped', "".concat(this.checkName, " was skipped"), '')];
            });
        });
    };
    GitHubCheck.prototype.cancelCheck = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.finishCheck('cancelled', "".concat(this.checkName, " Check could not be completed"), "Something went wrong and the ".concat(this.checkName, " could not be completed. Check your action logs for more details."))];
            });
        });
    };
    GitHubCheck.prototype.finishCheck = function (conclusion, summary, text) {
        return __awaiter(this, void 0, void 0, function () {
            var octokit, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        octokit = (0, github_1.getOctokit)(this.githubToken);
                        return [4 /*yield*/, octokit.rest.checks.update({
                                owner: github_1.context.repo.owner,
                                repo: github_1.context.repo.repo,
                                check_run_id: this.checkRunId,
                                status: 'completed',
                                conclusion: conclusion,
                                output: {
                                    title: this.checkName,
                                    summary: summary,
                                    text: text
                                }
                            })];
                    case 1:
                        response = _a.sent();
                        if (response.status !== 200) {
                            (0, core_1.warning)("Unexpected status code recieved when creating check: ".concat(response.status));
                            (0, core_1.debug)(JSON.stringify(response, null, 2));
                        }
                        else {
                            (0, core_1.info)("".concat(this.checkName, " updated"));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return GitHubCheck;
}());
exports.GitHubCheck = GitHubCheck;
