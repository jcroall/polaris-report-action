"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isIssueAllowed = exports.readSecurityGateFiltersFromString = void 0;
var SIGLogger_1 = require("./SIGLogger");
var CaseInsensitiveMap = require('case-insensitive-map');
function readSecurityGateFiltersFromString(securityGateString) {
    var securityGateJson = JSON.parse(securityGateString);
    var securityGateMap = new CaseInsensitiveMap();
    SIGLogger_1.logger.debug("Reading security gate filters");
    Object.keys(securityGateJson).forEach(function (key) {
        var _a;
        var values = securityGateJson[key];
        SIGLogger_1.logger.debug("  ".concat(key));
        securityGateMap.set(key, new Array());
        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var value = values_1[_i];
            (_a = securityGateMap.get(key)) === null || _a === void 0 ? void 0 : _a.push(value);
            SIGLogger_1.logger.debug("    ".concat(value));
        }
    });
    return (securityGateMap);
}
exports.readSecurityGateFiltersFromString = readSecurityGateFiltersFromString;
function isIssueAllowed(securityFilters, severity, cwe, isNew) {
    var _a, _b;
    if (isNew === void 0) { isNew = false; }
    if (securityFilters.get("status") && isNew && ((_a = securityFilters.get("status")) === null || _a === void 0 ? void 0 : _a.indexOf("new")) >= 0) {
        return (false);
    }
    if (securityFilters.get("severity") && ((_b = securityFilters.get("severity")) === null || _b === void 0 ? void 0 : _b.indexOf(severity)) >= 0) {
        return (false);
    }
    if (securityFilters.get("cwe")) {
        var cweValues = cwe.split(', ');
        for (var _i = 0, cweValues_1 = cweValues; _i < cweValues_1.length; _i++) {
            var cweValue = cweValues_1[_i];
            for (var _c = 0, _d = securityFilters.get("cwe"); _c < _d.length; _c++) {
                cwe = _d[_c];
                if (cwe == cweValue) {
                    return (false);
                }
            }
        }
    }
    return (true);
}
exports.isIssueAllowed = isIssueAllowed;
